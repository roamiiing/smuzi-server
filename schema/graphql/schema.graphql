scalar Date

type ValidationError {
  field: String!
  message: String!
}

type ValidationErrors {
  errors: [ValidationError!]!
}

type UnauthenticatedError {
  message: String!
}

type AlreadyExistsError {
  message: String!
}

enum ArtistType {
  Person
  Group
  Orchestra
  Choir
  Character
  Other
}

enum ReleaseStatus {
  Official
  Promotion
  Bootleg
  PseudoRelease
  Withdrawn
  Cancelled
  Unknown
}

type Recording {
  id: String!
  title: String!
  durationMs: Int!
  artists: [RecordingArtistCredit!]!
  releases: [RecordingRelease!]!
  """
  Url template for the cover image. Add `-250`, `-500` or `-1500`
  to the end of the url to get a specific size.
  """
  coverUrl: String
  firstReleaseDate: Date
}

type RecordingArtistCredit {
  name: String!
  artist: RecordingArtist!
  joinOn: String
}

type RecordingArtist {
  id: String!
  name: String!
  sortName: String!
}

type RecordingRelease {
  id: String!
  title: String!
  coverUrl: String!
  status: ReleaseStatus!
  artists: [RecordingReleaseArtistCredit!]!
  date: Date
}

type RecordingReleaseArtistCredit {
  name: String!
  artist: RecordingReleaseArtist!
  joinOn: String
}

type RecordingReleaseArtist {
  id: String!
  name: String!
  sortName: String!
}

input SearchRecordingsInput {
  query: String!
}

type SearchRecordingsResult {
  recordings: [Recording!]!
}

input PlayRecordingInput {
  recordingId: String!
}

type PlayRecordingResult {
  """
  The recording that was played
  """
  recording: Recording!
  """
  The URL of the stream that was played
  """
  streamUrl: String!
  """
  The actual length of the stream in milliseconds
  """
  durationMs: Int!
}

type Me {
  id: String!
  username: String!
}

input SignUpByPasswordInput {
  username: String!
  password: String!
}

type SignUpByPasswordResultSuccess {
  me: Me!
}

union SignUpByPasswordResult =
  | SignUpByPasswordResultSuccess
  | ValidationErrors
  | AlreadyExistsError

type RefreshSessionResult {
  success: Boolean!
}

type SignOutResult {
  success: Boolean!
}

input SignInByPasswordInput {
  username: String!
  password: String!
}

type SignInByPasswordResultSuccess {
  me: Me!
}

union SignInByPasswordResult =
  | SignInByPasswordResultSuccess
  | UnauthenticatedError

type GetMeResultSuccess {
  me: Me!
}

union GetMeResult = UnauthenticatedError | GetMeResultSuccess

enum PlaylistType {
  Playlist
  Liked
}

type PlaylistOwner {
  id: String!
  username: String!
}

type PlaylistInfo {
  id: String!
  name: String!
  description: String
  type: PlaylistType!
  owner: PlaylistOwner!
  createdAt: Date!
  updatedAt: Date!
}

type PlaylistEntry {
  id: String!
  recording: Recording!
  order: Int!
}

input CreatePlaylistInput {
  name: String!
  description: String
}

input GetPlaylistByIdInput {
  id: String!
}

type GetPlaylistByIdResult {
  playlist: PlaylistInfo
}

input GetPublicPlaylistsInput {
  userId: String!
}

type GetPublicPlaylistsResult {
  playlists: [PlaylistInfo!]
}

input GetPlaylistEntriesInput {
  playlistId: String!
}

type GetPlaylistEntriesResult {
  entries: [PlaylistEntry!]
}

type GetMyPlaylistsResult {
  playlists: [PlaylistInfo!]
}

type Query {
  """
  Search for recordings
  """
  searchRecordings(input: SearchRecordingsInput!): SearchRecordingsResult!
  """
  Retrieve a URL to stream a recording
  """
  playRecording(input: PlayRecordingInput!): PlayRecordingResult!
  """
  Get the current user
  """
  getMe: GetMeResult
  """
  Get playlist by id
  """
  getPlaylistById(input: GetPlaylistByIdInput!): GetPlaylistByIdResult
  """
  Get user's public playlists
  """
  getPublicPlaylists(input: GetPublicPlaylistsInput!): GetPublicPlaylistsResult
  """
  Get current user's playlists (both public and private)
  """
  getMyPlaylists: GetMyPlaylistsResult
  """
  Get playlist entries
  """
  getPlaylistEntries(input: GetPlaylistEntriesInput!): GetPlaylistEntriesResult
}

type Mutation {
  """
  Sign up a new user
  """
  signUpByPassword(input: SignUpByPasswordInput!): SignUpByPasswordResult!
  """
  Sign in a user
  """
  signInByPassword(input: SignInByPasswordInput!): SignInByPasswordResult!
  """
  Sign out a user
  """
  signOut: SignOutResult!
  """
  Refresh a session
  """
  refreshSession: RefreshSessionResult!
  """
  Create a new playlist
  """
  createPlaylist(input: CreatePlaylistInput!): PlaylistInfo!
}

schema {
  query: Query
  mutation: Mutation
}
