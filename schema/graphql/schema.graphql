scalar Date

type ValidationError {
  field: String!
  message: String!
}

type ValidationErrors {
  errors: [ValidationError!]!
}

type UnauthenticatedError {
  message: String!
}

type AlreadyExistsError {
  message: String!
}

enum ArtistType {
  Person
  Group
  Orchestra
  Choir
  Character
  Other
}

enum ReleaseStatus {
  Official
  Promotion
  Bootleg
  PseudoRelease
  Withdrawn
  Cancelled
  Unknown
}

type Recording {
  id: String!
  title: String!
  durationMs: Int!
  artists: [RecordingArtistCredit!]!
  releases: [RecordingRelease!]!
  """
  Url template for the cover image. Add `-250`, `-500` or `-1500`
  to the end of the url to get a specific size.
  """
  coverUrl: String
  firstReleaseDate: Date
}

type RecordingArtistCredit {
  name: String!
  artist: RecordingArtist!
  joinOn: String
}

type RecordingArtist {
  id: String!
  name: String!
  sortName: String!
}

type RecordingRelease {
  id: String!
  title: String!
  coverUrl: String!
  status: ReleaseStatus!
  artists: [RecordingReleaseArtistCredit!]!
  date: Date
}

type RecordingReleaseArtistCredit {
  name: String!
  artist: RecordingReleaseArtist!
  joinOn: String
}

type RecordingReleaseArtist {
  id: String!
  name: String!
  sortName: String!
}

input SearchRecordingsInput {
  query: String!
}

type SearchRecordingsResult {
  recordings: [Recording!]!
}

input PlayRecordingInput {
  recordingId: String!
}

type PlayRecordingResult {
  """
  The recording that was played
  """
  recording: Recording!
  """
  The URL of the stream that was played
  """
  streamUrl: String!
  """
  The actual length of the stream in milliseconds
  """
  durationMs: Int!
}

type Me {
  id: String!
  username: String!
}

input SignUpByPasswordInput {
  username: String!
  password: String!
}

type SignUpByPasswordResultSuccess {
  me: Me!
}

union SignUpByPasswordResult =
  | SignUpByPasswordResultSuccess
  | ValidationErrors
  | AlreadyExistsError

type GetMeResultSuccess {
  me: Me!
}

union GetMeResult = UnauthenticatedError | GetMeResultSuccess

type Query {
  """
  Search for recordings
  """
  searchRecordings(input: SearchRecordingsInput!): SearchRecordingsResult!
  """
  Retrieve a URL to stream a recording
  """
  playRecording(input: PlayRecordingInput!): PlayRecordingResult!
  """
  Get the current user
  """
  getMe: GetMeResult
}

type Mutation {
  """
  Sign up a new user
  """
  signUpByPassword(input: SignUpByPasswordInput!): SignUpByPasswordResult!
}

schema {
  query: Query
  mutation: Mutation
}
